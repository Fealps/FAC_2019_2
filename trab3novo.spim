.data
	str_erro_tam: .asciiz "Entradas invalidas.\n"
	str_erro_iter: .asciiz "Nao foi possivel calcular sqrt("
	str_erro_iter2: .asciiz ").\n"
	str_result: .asciiz "A raiz quadrada de "
	str_result2: .asciiz " eh "
	str_result3: .asciiz ", calculada em "
	str_result4: .asciiz " iteracoes.\n"
	max_iter: .word 100
	
.text
.globl main

main:
	li $v0, 5 			# scanf("%d", &x);
	syscall 
	move $s4, $v0 			# $s0 = x => numero a ser tirada raiz
					
	li $v0, 5 			#scanf("%d", &e);
	syscall
	move $s5, $v0		 	# $s1 = e => precisao do resultado desejada (10^-e)
	
					#if( x <= 1 || e > 16 || e < 1 )
	ble $s4, 1, erro_tam 		# if x <= 1 goto erro_tam
	bgt $s5, 16, erro_tam 		# if e > 16 goto erro_tam
	blt $s5, 1, erro_tam 		# if e < 1 goto erro_tam
	
					#declara variaveis f0 = 1.0, f2 = 10.0, s3 = b0 = 1, s2 = cont = 1;
					# p = float valor 1
	li $s7, 1
	mtc1.d $s7,$f0
	cvt.d.w $f0, $f0
	
					# float valor 10 
	li $s7, 10
	mtc1.d $s7,$f2 			# load 10 em f2
	cvt.d.w $f2, $f2
	
	li $s3, 1			# $s3 = b0 = 1
	li $s0, 0 			# $s0 = cont = 0;
	
calc_precisao:
	
	ble $s5, $s0, encontra_inteiros	# if (e <= cont)
	div.d $f0, $f0, $f2 		# p = p / 10.0 
	addiu $s0, $s0, 1 		# cont++
	j calc_precisao
	
encontra_inteiros:
	
	multu $s3, $s3 			# LO = b0^2
	mflo $t0 			# $t0 = b0^2
	bgt $t0, $s4, encontrou 	# if(b0^2 >= x)
	
	addu $s2, $s3, $zero 		# a0 = b0
	addiu $s3, $s3, 1 		# b0++
	
	j encontra_inteiros
	
encontrou:
	multu $s2, $s2 			# LO = a0^2
	mflo $t0 			# $t0 = a0^2
	bne $t0,$s4, converte		#if( a0^2 != x) goto converte
	subiu $s2, $s2, 1 		# a0++
	j converte

converte:
				
	mtc1.d $s2, $f2 		# a0 = $f2 (movendo para coproc1)
	cvt.d.w  $f2, $f2 		# convertendo a1 para float (converter word para float)
	
	mtc1.d $s3, $f6 		# b0 = $f6(movendo para coproc1)
	cvt.d.w  $f6, $f6 		# convertendo b0 para float (converter word para float)
			
	mtc1.d $s4, $f4 		# x = $f4 convertendo x para float (movendo para coproc1)
	cvt.d.w $f4, $f4 		# convertendo x para float (converter word para float)
	
	addiu $s0, $zero, 0		# i = 1
	lw $s1, max_iter 		# max de iteracoes para raiz = 100
	
	j calc_raiz
	
calc_raiz:

	bgt $s0, $s1, erro_iter 	# if ( i > 100) goto erro_iter
	addi $s0, $s0, 1 		# i++
	
	li $s7, 2
	mtc1.d $s7,$f10			# load 2 em f10
	cvt.d.w $f10, $f10
	
	add.d $f20, $f2, $f6 		# $f2 = a = a0 + b0
	div.d $f20, $f20, $f10 		# $f20 = a = a / 2	
	div.d $f22, $f4, $f20 		# $f22 = b = x / a
	
	mov.d $f6, $f22 		#a0 = a
	mov.d $f2, $f20			#b0 = b
	
	sub.d $f8, $f22, $f20 		# $f8 = |a - b|
	
	li $s7, 0
	mtc1.d $s7,$f18 		# load 0 em f18
	cvt.d.w $f18, $f18
	
	c.lt.d $f8, $f18 		#(if $f8 < 0) 
	bc1t calc_raiz_loop_negativo	#true goto raiz_negativa
	
	j calc_raiz_loop
	
calc_raiz_loop:
	
	c.le.d $f8, $f0 		# if ( |a - b| <= p) flag = true
	bc1t imprime_saida 		# if flag = true goto imprime_saida
	j calc_raiz 			# goto calc_raiz
	 
calc_raiz_loop_negativo:
	
	li $s7, -1
	mtc1.d $s7,$f10			# load -1 em f10
	cvt.d.w $f10, $f10
	
	mul.d $f8, $f8, $f10		#f8 *= -1
	
	c.le.d $f8, $f0 		# if ( |a - b| <= p) flag = true
	bc1t imprime_saida 		# if flag = true goto imprime_saida
	j calc_raiz 			# goto calc_raiz
	

erro_tam:					
	la $a0, str_erro_tam 		# print de erro de entrada invalida
	li $v0, 4
	syscall
	j exit 
	
erro_iter:
	la $a0, str_erro_iter 		# print de error iteracao > 100
	li $v0, 4
	syscall
	
	move $a0, $s4
	li $v0, 1 			# print x
	syscall
	
	la $a0, str_erro_iter2 		# print de error 2
	li $v0, 4
	syscall
	j exit

imprime_saida:
	la $a0, str_result 		# print de saida1
	li $v0, 4
	syscall
	
	move $a0, $s4
	li $v0, 1 			# print x
	syscall
	
	la $a0, str_result2 		# print de saida2
	li $v0, 4
	syscall
	
	mov.d $f12, $f20  		# print y 
	li $v0, 3
	syscall
	
	la $a0, str_result3 		# print de saida4
	li $v0, 4
	syscall
	
	move $a0, $s0 			# print i
	li $v0, 1 
	syscall
	
	la $a0, str_result4 		# print de saida5
	li $v0, 4
	syscall
	j exit
	
exit:
	li $v0, 10			#exit
	syscall
	
