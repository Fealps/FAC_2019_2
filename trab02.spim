.data
str_erro_tam: .asciiz "Entradas invalidas.\n"
str_erro_prim: .asciiz "O modulo nao eh primo.\n"
str_msg_1: .asciiz "A exponencial modular "
str_msg_2: .asciiz " elevado a "
str_msg_3: .asciiz " (mod "
str_msg_4: .asciiz ") eh "
str_msg_5: .asciiz ".\n"

.text
.globl main

main:

ler_inteiro:
	li $v0, 5 # ler inteiro
	syscall 
	move $s3, $v0 #base
	
	li $v0, 5 # ler inteiro
	syscall
	move $s2, $v0 #expoente
	
	li $v0, 5 # ler inteiro
	syscall
	move $s1, $v0 #primo
	
	bge $s3, 65536,erro_tam #if(a3 >= 65536)
	bge $s2, 65536,erro_tam #if(a2 >= 65536)
	bge $s1, 65536,erro_tam #if(a1 >= 65536)
	blez $s3, erro_tam 	#if(a3 < 0)
	blez $s2, erro_tam	#if(a2 < 0)
	blez $s1, erro_tam	#if(a1 < 0)

	jal eh_primo
	

erro_tam:
	la $a0, str_erro_tam #print de error
	li $v0, 4
	syscall
	j exit
	
	
eh_primo:
	addu $t0, $zero, 3 # $t0 = 3
	ble $s1, $t0, calc_exp # se primo eh 1, 2 ou 3 eh primo
	subu $t0, $t0, 1 # $t0 = 2
	div $s1, $t0 # dividir primo por 2
	mfhi $t0 # $t0 = resto da divisao
	beqz $t0, erro_prime # se resto 0, eh par, logo nÃ£o eh primo
	addu $t1, $zero, 3 # primeiro impar depois de 2
	j eh_primo_impar
	
	
eh_primo_impar:
	div $s1, $t1 # dividir primo por prox impar
	mfhi $t2 # resto da divisao
	beqz $t2, erro_prime # se resto 0, nao eh primo pois e divisivel por um impar
	addu $t1, $t1, 2 # $t1 = proximo impar
	addu $t4, $zero, 255 # limite superior para teste de primo
	bge $t4, $t1, calc_exp
	j eh_primo_impar


erro_prime:
	la $a0, str_erro_prim #print de error
	li $v0, 4
	syscall
	j exit


calc_exp:
	beq $s2, 1, exp_eh_um # if (exp = 1)
	addu $s4, $zero, $s3 # resultado = base
	addu $t0, $zero, $s2 # temp = exponente
	clz $t1, $t0 # $t1 = numero de zeros antes do primeiro bit significativo em $t0
	addi $t2, $zero, 32 # $t2 = numero de bits numa word
	subu $t2, $t2, $t1 # $t2 = 32 - $t1
	subu $t2, $t2, 1 # ignorar primeiro bit significativo para square multiply
	j square_multiply
	
square_multiply:
	addu $t3, $t0, $zero # $t3 = exponente
	srlv $t3, $t3, $t2 # pegar bit n# $t2 de exponente
	beqz $t3, bit_eh_zero # se $t3 = 0, square and multiply
	j bit_eh_um # se $t3 = 1, square
	
bit_eh_um:
	mult $s4, $s4 # resultado^2
	mflo $s4 # $s4 = resultado^2
	mult $s4, $s3 # resultado * base
	mflo $s4 # $s4 = resultado * base
	div $s4, $s1 # base / primo
	mfhi $s4 # resultado = base (mod primo)
	subu $t2, $t2, 1 # exponente--
	beqz $t2, imprime_saida # se exponente = 0
	j square_multiply
	
bit_eh_zero:
	mult $s4, $s4 # resultado^2
	mflo $s4 # $s4 = resultado^2
	div $s4, $s1 # base / primo
	mfhi $s4 # resultado = base (mod primo)
	subu $t2, $t2, 1 # exponente--
	beqz $t2, imprime_saida # se exponente = 0
	j square_multiply
	
exp_eh_um:
	addu $s4, $zero, $s3 # resultado = base^1 = base
	div $s4, $s1 # base / primo
	mfhi $s4 # resultado = base (mod primo)
	j imprime_saida
	
imprime_saida:
	la $a0, str_msg_1 # string de resultado
	li $v0, 4
	syscall
		
	move $a0, $s3  # print base
	li $v0, 1
	syscall
		
	la $a0, str_msg_2 # string de resultado
	li $v0, 4
	syscall
	
	move $a0, $s2 # print expoente
	li $v0, 1
	syscall
	
	la $a0, str_msg_3 # string de resultado
	li $v0, 4
	syscall
	
	move $a0, $s1  # print primo
	li $v0, 1
	syscall
	 
	la $a0, str_msg_4 # string de resultado
	li $v0, 4
	syscall
	
	move $a0, $s4 # print resultado
	li $v0, 1
	syscall
	
	la $a0, str_msg_5 # string de resultado
	li $v0, 4
	syscall
	
	j exit
exit:
	li $v0, 10
	syscall
